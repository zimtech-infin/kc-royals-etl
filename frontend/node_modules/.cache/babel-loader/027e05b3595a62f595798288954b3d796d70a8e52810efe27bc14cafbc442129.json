{"ast":null,"code":"/**\n * File: api.js\n * Version: Fixed - v2.0\n * Created by: K. Zimmerman\n * Project: kc_royals_backend\n * Description:\n * - Handles API requests for fetching player data.\n */\n\nimport axios from \"axios\";\nconst API_BASE_URL = \"http://127.0.0.1:8000/api\";\n\n/**\n * Fetches the list of all players from the API.\n */\nexport const fetchPlayers = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/players/`);\n    if (!response.data || response.data.length === 0) {\n      console.warn(\"API returned an empty player list.\");\n    }\n    console.log(\"API Response (players):\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to fetch players:\", error);\n    return [];\n  }\n};\n\n/**\n * Fetches detailed information for a single player by ID.\n */\nexport const fetchPlayerDetails = async playerId => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/players/${playerId}/`);\n    if (!response.data) {\n      console.warn(`No details returned for player ID: ${playerId}`);\n    }\n    console.log(\"API Response (player detail):\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`Failed to fetch details for player ${playerId}:`, error);\n    return null;\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","fetchPlayers","response","get","data","length","console","warn","log","error","fetchPlayerDetails","playerId"],"sources":["/Users/kelvins-mac/Documents/www/kc-royals-etl/frontend/src/api/api.js"],"sourcesContent":["/**\n * File: api.js\n * Version: Fixed - v2.0\n * Created by: K. Zimmerman\n * Project: kc_royals_backend\n * Description:\n * - Handles API requests for fetching player data.\n */\n\nimport axios from \"axios\";\n\nconst API_BASE_URL = \"http://127.0.0.1:8000/api\";\n\n/**\n * Fetches the list of all players from the API.\n */\nexport const fetchPlayers = async () => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/players/`);\n    if (!response.data || response.data.length === 0) {\n      console.warn(\"API returned an empty player list.\");\n    }\n    console.log(\"API Response (players):\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(\"Failed to fetch players:\", error);\n    return [];\n  }\n};\n\n/**\n * Fetches detailed information for a single player by ID.\n */\nexport const fetchPlayerDetails = async (playerId) => {\n  try {\n    const response = await axios.get(`${API_BASE_URL}/players/${playerId}/`);\n    if (!response.data) {\n      console.warn(`No details returned for player ID: ${playerId}`);\n    }\n    console.log(\"API Response (player detail):\", response.data);\n    return response.data;\n  } catch (error) {\n    console.error(`Failed to fetch details for player ${playerId}:`, error);\n    return null;\n  }\n};\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA;AACA;AACA,OAAO,MAAMC,YAAY,GAAG,MAAAA,CAAA,KAAY;EACtC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,WAAW,CAAC;IAC5D,IAAI,CAACE,QAAQ,CAACE,IAAI,IAAIF,QAAQ,CAACE,IAAI,CAACC,MAAM,KAAK,CAAC,EAAE;MAChDC,OAAO,CAACC,IAAI,CAAC,oCAAoC,CAAC;IACpD;IACAD,OAAO,CAACE,GAAG,CAAC,yBAAyB,EAAEN,QAAQ,CAACE,IAAI,CAAC;IACrD,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,OAAO,EAAE;EACX;AACF,CAAC;;AAED;AACA;AACA;AACA,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,QAAQ,IAAK;EACpD,IAAI;IACF,MAAMT,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,YAAY,YAAYW,QAAQ,GAAG,CAAC;IACxE,IAAI,CAACT,QAAQ,CAACE,IAAI,EAAE;MAClBE,OAAO,CAACC,IAAI,CAAC,sCAAsCI,QAAQ,EAAE,CAAC;IAChE;IACAL,OAAO,CAACE,GAAG,CAAC,+BAA+B,EAAEN,QAAQ,CAACE,IAAI,CAAC;IAC3D,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOK,KAAK,EAAE;IACdH,OAAO,CAACG,KAAK,CAAC,sCAAsCE,QAAQ,GAAG,EAAEF,KAAK,CAAC;IACvE,OAAO,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}